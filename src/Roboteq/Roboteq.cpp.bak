#include "Roboteq.h"

namespace Cyberpod
{

	Roboteq::Roboteq(const MODE &mode,
		               FlexCAN &port,
		               const uint32_t &readTimeout,
		               const uint32_t &receiveTimeout):
	config_(),
	status_(Roboteq::STATUS::INIT),
	mode_(mode),
	readTimeout_(readTimeout),
	receiveTimeout_(receiveTimeout),
	port_(port),
	msgOut_(),
	msgIn_()
	{}

	int32_t Roboteq::init(void)
	{

		msgOut_.ext = 0;
		msgOut_.len = 8;

		stop(false);

		uint32_t t0 = millis();

		while(true)
		{
			if(port_.available()>0)
			{
				if(checkSuccessful(static_cast<uint16_t>(CMD_IDX::EX),0x00))
				{
					delay(100);
					while(port_.available()>0)
					{
						port_.read(msgIn_);
					}
					return 1;
				}
			}

			if(millis()-t0>config_.startupTimeout)
			{
				return -1;
			}
		}
	}

	int32_t Roboteq::sendCmd(const float &u,
	                      const uint8_t motorIdx,
	                      const bool checkAck)
	{
		msgOut_.id = config_.queryIdx + config_.openCanId;

		num16_t n16;
		num32_t n32;

		n16.ui = static_cast<uint16_t>(CMD_IDX::CANGO);

		msgOut_.buf[0] = 0x20;
		msgOut_.buf[1] = n16.c[0];
		msgOut_.buf[2] = n16.c[1];
		msgOut_.buf[3] = motorIdx;

		n32.f = u;
		n32.i = round(n32.f*1000.0F);

		msgOut_.buf[4] = n32.c[0];
		msgOut_.buf[5] = n32.c[1];
		msgOut_.buf[6] = n32.c[2];
		msgOut_.buf[7] = n32.c[3];

		port_.write(msgOut_);

		if(checkAck)
		{
			if(!checkSuccessful(static_cast<uint16_t>(CMD_IDX::CANGO),motorIdx))
				return -1;
			else
				return 1;
		}
		return 2;
	}

	int32_t Roboteq::sendCmd(const float &u1,
										       const float &u2,
										       const bool checkAck)
	{
		sendCmd(u1,static_cast<uint8_t>(1),false);
		sendCmd(u2,static_cast<uint8_t>(2),false);

		if(checkAck)
		{
			if(!checkSuccessful(static_cast<uint16_t>(CMD_IDX::CANGO),static_cast<uint8_t>(1)))
				return -1;

			if(!checkSuccessful(static_cast<uint16_t>(CMD_IDX::CANGO),static_cast<uint8_t>(2)))
				return -1;

			return 1;
		}
		return 2;
	}

	int32_t Roboteq::start(const bool checkAck)
	{
		msgOut_.id = config_.queryIdx + config_.openCanId;

		num16_t n16;

		n16.ui = static_cast<uint16_t>(CMD_IDX::MG);

		msgOut_.buf[0] = 0x2C;
		msgOut_.buf[1] = n16.c[0];
		msgOut_.buf[2] = n16.c[1];
		msgOut_.buf[3] = 0x00;
		msgOut_.buf[4] = 0x01;
		msgOut_.buf[5] = 0x00;
		msgOut_.buf[6] = 0x00;
		msgOut_.buf[7] = 0x00;

		port_.write(msgOut_);

		if(checkAck)
		{
			if(checkSuccessful(static_cast<uint16_t>(CMD_IDX::MG),0x00))
				return 1;
			else
				return -1;		
		}
		return 2;

	}

	int32_t Roboteq::stop(const bool checkAck)
	{
		msgOut_.id = config_.queryIdx + config_.openCanId;

		num16_t n16;

		n16.ui = static_cast<uint16_t>(CMD_IDX::EX);

		msgOut_.buf[0] = 0x2C;
		msgOut_.buf[1] = n16.c[0];
		msgOut_.buf[2] = n16.c[1];	
		msgOut_.buf[3] = 0x00;
		msgOut_.buf[4] = 0x01;
		msgOut_.buf[5] = 0x00;
		msgOut_.buf[6] = 0x00;
		msgOut_.buf[7] = 0x00;

		port_.write(msgOut_);

		if(checkAck)
		{
			if(checkSuccessful(static_cast<uint16_t>(CMD_IDX::EX),0x00))
				return 1;
			else
				return -1;
		}
		return 2;

	}

	bool Roboteq::newMsgCheck(void)
	{
		if(port_.available()>0)
			return true;
		else
			return false;
	}

	bool Roboteq::checkSuccessful(const uint16_t queryIdx,
		                            const uint8_t querySubIdx)
	{
		uint32_t t0 = micros();
		num16_t n16;

		while(true)
		{
			if(port_.available()>0)
			{
				port_.read(msgIn_);
				if(msgIn_.id == config_.replyIdx + config_.openCanId)
				{
					if(msgIn_.buf[0]==0x60)
					{
						n16.c[0] = msgIn_.buf[1];
						n16.c[1] = msgIn_.buf[2];
						if(n16.ui == queryIdx && msgIn_.buf[3] == querySubIdx)
						{
							return true;
						}
					}

					if(msgIn_.buf[0]==0x80)
					{
						return false;
					}
				}
			}

			if((micros()-t0)>receiveTimeout_)
			{
				return false;
			}
		}
	}
}